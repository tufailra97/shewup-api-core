// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StoreUserRoles {
  MANAGER
  STAFF

  @@map("store_user_roles")
}

enum BusinessUserRoles {
  ADMIN
  REPORTER
  SUPER_ADMIN

  @@map("business_user_roles")
}

enum Gender {
  MALE
  FEMALE
  OTHER

  @@map("gender")
}

enum Rating {
  EXCELLENT // 5 stars
  GOOD // 4 starts
  AVERAGE // 3 stars
  POOR // 2 stars
  BAD // 1 stars
  NA // not available

  @@map("rating")
}

model Customers {
  id              String            @id @default(uuid())
  firstName       String            @map("first_name")
  lastName        String            @map("last_name")
  email           String            @map("email")
  password        String
  gender          Gender
  dob             String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt
  contactNumber   String            @map("contact_number")
  customerAddress CustomerAddress[]
  orders          Orders[]
  productReviews  ProductReviews[]
  storeReviews    StoreReviews[]

  @@map("customers")
}

model CustomerAddress {
  id           String    @id @default(uuid())
  addressLine1 String    @map("address_line_1")
  addressLine2 String    @map("address_line_2")
  city         String
  postCode     String    @map("post_code")
  country      String    @default("United Kingdom")
  customerId   String    @map("customer_id")
  isDefault    Boolean   @map("is_default")
  customer     Customers @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt

  @@map("customer_address")
}

model Orders {
  id           String         @id @default(uuid())
  total        Float
  createdAt    DateTime       @default(now()) @map("created_at")
  udpatedAt    DateTime       @updatedAt @map("updated_at")
  customerId   String         @map("customer_id")
  customer     Customers      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  storeId      String         @map("store_id")
  stores       Stores         @relation(fields: [storeId], references: [id], onDelete: SetNull)
  orderDetails OrderDetails[]

  @@map("orders")
}

model OrderDetails {
  id         String   @id @default(uuid())
  price      Float
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  orderId    String   @map("order_id")
  order      Orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String   @map("product_id")
  product    Products @relation(fields: [productId], references: [id], onDelete: SetNull)
  isRefunded Boolean  @map("is_refunded")

  @@index([productId], map: "order_details_product_id_idx")
  @@map("order_details")
}

model Categories {
  id           String         @id @default(uuid())
  name         String         @unique
  description  String
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  products     Products[]
  categoryTags CategoryTags[]

  @@index([name], map: "categories_name_idx")
  @@map("categories")
}

model Products {
  id                 String                @id @default(uuid())
  name               String
  description        String
  price              Float
  isASideProduct     Boolean               @map("is_a_side_product")
  createdAt          DateTime              @default(now()) @map("created_at")
  updatedAt          DateTime              @updatedAt @map("updated_at")
  productDetails     Json?                 @map("product_details")
  categoryId         String                @map("category_id")
  category           Categories            @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  businessId         String                @map("business_id")
  Businesses         Businesses            @relation(fields: [businessId], references: [id], onDelete: Cascade)
  menuSectionId      String                @map("menu_section_id")
  menuSection        MenuSections          @relation(fields: [menuSectionId], references: [id], onDelete: SetNull)
  orderDetails       OrderDetails[]
  productReviews     ProductReviews[]
  productTags        ProductTags[]
  productImages      ProductImages[]
  productIngredients ProductIngredients[]
  productInventory   ProductInventories[]
  productPrice       ProductPriceHistory[]


  @@index([name], map: "products_name_idx")
  @@index([price], map: "products_price_idx")
  @@index([categoryId], map: "products_category_id_idx")
  @@index([isASideProduct], map: "products_is_a_side_product_idx")
  @@map("products")
}

model ProductPriceHistory {
  id        String   @id @default(uuid())
  price     Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  productId String   @map("product_id")
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_price_history")
}

model ProductInventories {
  id          String   @id @default(uuid())
  quantity    Int      @map("quantity")
  isAVailable Boolean  @map("is_available")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  productId   String   @map("product_id")
  products    Products @relation(fields: [productId], references: [id])
  storesId    String   @map("stores_id")
  stores      Stores   @relation(fields: [storesId], references: [id])

  @@map("product_inventories")
}

model Menus {
  id          String         @id @default(uuid())
  name        String         @unique
  description String
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  businessId  String         @map("business_id")
  Businesses  Businesses     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  menuItems   MenuSections[]

  @@map("menus")
}

model MenuSections {
  id           String     @id @default(uuid())
  name         String
  description  String?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  menuId       String     @map("menu_id")
  menu         Menus      @relation(fields: [menuId], references: [id], onDelete: Cascade)
  sectionIndex Int        @map("section_index") // use this to order the sections in the menu from end application
  products     Products[]

  @@map("menu_items")
}

model ProductIngredients {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  productId   String   @map("product_id")
  products    Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_ingredients")
}

model ProductImages {
  id          String   @id @default(uuid())
  name        String?  @default("")
  imageUrl    String   @map("image_url")
  description String?  @default("")
  index       Int?     @default(0) @map("index")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  productId   String   @map("product_id")
  products    Products @relation(fields: [productId], references: [id])

  @@index([productId], map: "product_images_product_id_idx")
  @@map("product_images")
}

model Tags {
  id           String         @id @default(uuid())
  name         String         @unique
  description  String?
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  productTags  ProductTags[]
  categoryTags CategoryTags[]

  @@index([name], map: "tags_name_idx")
  @@map("tags")
}

model ProductTags {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  tagId     String   @map("tag_id")
  tag       Tags     @relation(fields: [tagId], references: [id])
  productId String   @map("product_id")
  product   Products @relation(fields: [productId], references: [id])


  @@index([productId], map: "product_tags_product_id_idx")
  @@index([tagId], map: "product_tags_tag_id_idx")
  @@map("product_tags")
}

model CategoryTags {
  id         String     @id @default(uuid())
  categoryId String     @map("category_id")
  tagId      String     @map("tag_id")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  tag        Tags       @relation(fields: [tagId], references: [id])
  category   Categories @relation(fields: [categoryId], references: [id])

  @@index([categoryId], map: "category_tags_category_id_idx")
  @@index([tagId], map: "category_tags_tag_id_idx")
  @@map("category_tags")
}

model ProductReviews {
  id          String    @id @default(uuid())
  productId   String    @map("product_id")
  review      String
  rating      Rating
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  product     Products  @relation(fields: [productId], references: [id], onDelete: Cascade)
  customersId String
  customers   Customers @relation(fields: [customersId], references: [id], onDelete: Cascade)

  @@index([productId], map: "product_reviews_product_id_idx")
  @@index([rating], map: "product_reviews_rating_idx")
  @@map("product_reviews")
}

model Users {
  id                   String          @id @default(uuid())
  firstName            String          @map("first_name")
  lastName             String          @map("last_name")
  email                String          @unique
  password             String
  gender               Gender
  businessUsers        StoreUsers[]
  businessAccountUsers BusinessUsers[]

  @@map("users")
}

model StoreUsers {
  id                 String         @id @default(uuid())
  userId             String         @map("user_id")
  user               Users          @relation(fields: [userId], references: [id])
  storeId            String         @map("store_id")
  store              Stores         @relation(fields: [storeId], references: [id])
  role               StoreUserRoles
  storeUniquePassKey String         @map("store_unique_pass_key") // user can use this key to login in to the store
  isActive           Boolean        @map("is_active")
  isValidated        Boolean        @map("is_validated")

  @@map("store_users")
}

model Businesses {
  id            String          @id @default(uuid())
  name          String
  addressLine1  String          @map("address_line_1")
  addressLine2  String?         @map("address_line_2")
  city          String
  postCode      String          @map("post_code")
  country       String          @default("United Kingdom")
  stores        Stores[]
  businessUsers BusinessUsers[]
  products      Products[]
  menus         Menus[]

  @@map("businesses")
}

model BusinessUsers {
  id         String            @id @default(uuid())
  userId     String            @map("user_id")
  isOwner    Boolean           @map("is_owner") // NOTE: unsure how this will be useful?
  user       Users             @relation(fields: [userId], references: [id])
  busienssId String            @map("business_id")
  businesses Businesses        @relation(fields: [busienssId], references: [id])
  role       BusinessUserRoles

  @@map("business_users")
}

model Stores {
  id                  String               @id @default(uuid())
  name                String
  description         String
  addressLine1        String               @map("address_line_1")
  addressLine2        String?              @map("address_line_2")
  city                String
  postCode            String               @map("post_code")
  companyNumber       String?              @map("company_number")
  businessId          String               @map("business_id") // parent Businesses id
  businesses          Businesses           @relation(fields: [businessId], references: [id], onDelete: Cascade)
  productInventsories ProductInventories[]
  storeUsers          StoreUsers[]
  orders              Orders[]
  storeReviews        StoreReviews[]

  @@map("stores")
}

model StoreReviews {
  id          String    @id @default(uuid())
  storeId     String    @map("store_id")
  review      String
  rating      Rating
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  store       Stores    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  customersId String
  customers   Customers @relation(fields: [customersId], references: [id], onDelete: Cascade)

  @@index([storeId], map: "store_reviews_store_id_idx")
  @@index([rating], map: "store_reviews_rating_idx")
  @@map("store_reviews")
}
