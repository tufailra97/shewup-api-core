// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  USER
}

model Users {
  id        String   @id @default(uuid())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  order     Orders[]

  ProductReviews ProductReviews[]
  @@index([lastName, firstName], map: "users_last_name_first_name_idx")
  @@map("users")
}

model Orders {
  id           String         @id @default(uuid())
  userId       String         @map("user_id")
  user         Users          @relation(fields: [userId], references: [id])
  createdAt    DateTime       @default(now()) @map("created_at")
  udpatedAt    DateTime       @updatedAt @map("updated_at")
  orderDetails OrderDetails[]

  @@map("orders")
}

model OrderDetails {
  id        String   @id @default(uuid())
  orderId   String   @map("order_id")
  order     Orders   @relation(fields: [orderId], references: [id])
  productId String   @map("product_id")
  product   Products @relation(fields: [productId], references: [id])
  quantity  Int      @map("quantity")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order_details")
}

model Categories {
  id          String     @id @default(uuid())
  name        String     @unique
  description String
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  products    Products[]

  CategoryTags CategoryTags[]
  @@map("categories")
}

model Products {
  id          String     @id @default(uuid())
  name        String     @unique
  description String
  price       Float
  categoryId  String     @map("category_id")
  category    Categories @relation(fields: [categoryId], references: [id])
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  sku         String


  orderDetails   OrderDetails[]
  productReviews ProductReviews[]
  productTags    ProductTags[]
  @@map("products")
}

model Tags {
  id          String        @id @default(uuid())
  name        String        @unique
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  productTags ProductTags[]

  CategoryTags CategoryTags[]
  @@index([name])
  @@map("tags")
}

model ProductTags {
  id        String   @id @default(uuid())
  productId String   @map("product_id")
  product   Products @relation(fields: [productId], references: [id])
  tagId     String   @map("tag_id")
  tag       Tags     @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([productId, tagId])
  @@map("product_tags")
}

model CategoryTags {
  id         String     @id @default(uuid())
  categoryId String
  tagId      String     @map("tag_id")
  tag        Tags       @relation(fields: [tagId], references: [id])
  category   Categories @relation(fields: [categoryId], references: [id])
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  @@index([categoryId])
  @@map("category_tags")
}

model ProductReviews {
  id        String   @id @default(uuid())
  productId String   @map("product_id")
  product   Products @relation(fields: [productId], references: [id])
  userId    String   @map("user_id")
  user      Users    @relation(fields: [userId], references: [id])
  review    String
  rating    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product_reviews")
}
